From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ryan Volz <ryan.volz@gmail.com>
Date: Wed, 19 Oct 2022 00:10:34 -0400
Subject: [PATCH] runtime: thrift: Modernize c++ and use override, rec'd by
 clang-tidy

Signed-off-by: Ryan Volz <ryan.volz@gmail.com>
---
 .../gnuradio/rpcpmtconverters_thrift.h        | 30 +++++++++----------
 .../gnuradio/rpcserver_booter_thrift.h        |  8 ++---
 .../include/gnuradio/rpcserver_thrift.h       | 28 +++++++++--------
 .../include/gnuradio/thrift_server_template.h |  8 ++---
 4 files changed, 38 insertions(+), 36 deletions(-)

diff --git a/gnuradio-runtime/include/gnuradio/rpcpmtconverters_thrift.h b/gnuradio-runtime/include/gnuradio/rpcpmtconverters_thrift.h
index 1b141f6f9..8ff10b6de 100644
--- a/gnuradio-runtime/include/gnuradio/rpcpmtconverters_thrift.h
+++ b/gnuradio-runtime/include/gnuradio/rpcpmtconverters_thrift.h
@@ -25,49 +25,49 @@ struct to_pmt_f {
 };
 
 struct to_pmt_byte_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_short_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_int_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_long_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_double_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_string_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_bool_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_complex_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_f32vect_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_f64vect_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_s64vect_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_s32vect_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_s16vect_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_s8vect_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 struct to_pmt_c32vect_f : public to_pmt_f {
-    pmt::pmt_t operator()(const GNURadio::Knob& knob);
+    pmt::pmt_t operator()(const GNURadio::Knob& knob) override;
 };
 
 class To_PMT
diff --git a/gnuradio-runtime/include/gnuradio/rpcserver_booter_thrift.h b/gnuradio-runtime/include/gnuradio/rpcserver_booter_thrift.h
index 0e2f3139f..f77b80c69 100644
--- a/gnuradio-runtime/include/gnuradio/rpcserver_booter_thrift.h
+++ b/gnuradio-runtime/include/gnuradio/rpcserver_booter_thrift.h
@@ -25,11 +25,11 @@ class rpcserver_booter_thrift
 {
 public:
     rpcserver_booter_thrift();
-    ~rpcserver_booter_thrift();
+    ~rpcserver_booter_thrift() override;
 
-    rpcserver_base* i();
-    const std::string& type() { return d_type; }
-    const std::vector<std::string> endpoints();
+    rpcserver_base* i() override;
+    const std::string& type() override { return d_type; }
+    const std::vector<std::string> endpoints() override;
 
 private:
     std::string d_type;
diff --git a/gnuradio-runtime/include/gnuradio/rpcserver_thrift.h b/gnuradio-runtime/include/gnuradio/rpcserver_thrift.h
index 48c6e44bc..5770618b3 100644
--- a/gnuradio-runtime/include/gnuradio/rpcserver_thrift.h
+++ b/gnuradio-runtime/include/gnuradio/rpcserver_thrift.h
@@ -28,22 +28,24 @@ class rpcserver_thrift : public virtual rpcserver_base, public GNURadio::Control
 {
 public:
     rpcserver_thrift();
-    virtual ~rpcserver_thrift();
+    ~rpcserver_thrift() override;
 
     void registerConfigureCallback(const std::string& id,
-                                   const configureCallback_t callback);
-    void unregisterConfigureCallback(const std::string& id);
+                                   const configureCallback_t callback) override;
+    void unregisterConfigureCallback(const std::string& id) override;
 
-    void registerQueryCallback(const std::string& id, const queryCallback_t callback);
-    void unregisterQueryCallback(const std::string& id);
+    void registerQueryCallback(const std::string& id,
+                               const queryCallback_t callback) override;
+    void unregisterQueryCallback(const std::string& id) override;
 
-    void registerHandlerCallback(const std::string& id, const handlerCallback_t callback);
-    void unregisterHandlerCallback(const std::string& id);
+    void registerHandlerCallback(const std::string& id,
+                                 const handlerCallback_t callback) override;
+    void unregisterHandlerCallback(const std::string& id) override;
 
-    void setKnobs(const GNURadio::KnobMap&);
-    void getKnobs(GNURadio::KnobMap&, const GNURadio::KnobIDList&);
-    void getRe(GNURadio::KnobMap&, const GNURadio::KnobIDList&);
-    void properties(GNURadio::KnobPropMap&, const GNURadio::KnobIDList& knobs);
+    void setKnobs(const GNURadio::KnobMap&) override;
+    void getKnobs(GNURadio::KnobMap&, const GNURadio::KnobIDList&) override;
+    void getRe(GNURadio::KnobMap&, const GNURadio::KnobIDList&) override;
+    void properties(GNURadio::KnobPropMap&, const GNURadio::KnobIDList& knobs) override;
 
     /*!
      *  \brief Call this to post a message to the \p port for the block
@@ -71,9 +73,9 @@ public:
      */
     void postMessage(const std::string& alias,
                      const std::string& port,
-                     const std::string& msg);
+                     const std::string& msg) override;
 
-    virtual void shutdown();
+    void shutdown() override;
 
 private:
     static gr::logger_ptr d_logger;
diff --git a/gnuradio-runtime/include/gnuradio/thrift_server_template.h b/gnuradio-runtime/include/gnuradio/thrift_server_template.h
index 6cd8f63d1..c2c891c95 100644
--- a/gnuradio-runtime/include/gnuradio/thrift_server_template.h
+++ b/gnuradio-runtime/include/gnuradio/thrift_server_template.h
@@ -39,7 +39,7 @@ public:
     ~thrift_server_template();
 
 protected:
-    TserverBase* i_impl();
+    TserverBase* i_impl() override;
     friend class thrift_application_base<TserverBase, TImplClass>;
 
 private:
@@ -62,10 +62,10 @@ private:
             ;
         }
 
-        virtual ~TBufferedTransportFactory() {}
+        ~TBufferedTransportFactory() override {}
 
-        virtual std::shared_ptr<thrift::transport::TTransport>
-        getTransport(std::shared_ptr<thrift::transport::TTransport> trans)
+        std::shared_ptr<thrift::transport::TTransport>
+        getTransport(std::shared_ptr<thrift::transport::TTransport> trans) override
         {
             return std::shared_ptr<thrift::transport::TTransport>(
                 new thrift::transport::TBufferedTransport(trans, bufferSize));
-- 
2.37.3

