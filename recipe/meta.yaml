{% set version = "3.8.2.0" %}

package:
  name: gnuradio
  version: {{ version }}

source:
  url: https://github.com/gnuradio/gnuradio/releases/download/v{{ version }}/gnuradio-{{ version }}.tar.gz
  sha256: 3e293541a9ac8d78660762bae8b80c0f6195b3494e1c50c01a9fd79cc60bb624
  patches:
    - 0001-Use-raw-strings-for-paths-substituted-directly-into-.patch
    - 0001-Don-t-use-hard-coded-path-constants.patch
    - 0001-python-Do-not-link-against-python-lib-for-building-a.patch
    - 0001-cmake-Shorten-swig-command-line-by-removing-duplicat.patch
    - 0001-cmake-Install-python-wrapper-exe-for-scripts-on-Wind.patch
    - 0002-cmake-Don-t-generate-.pyc-and-.pyo-files.patch
    - 0001-Fix-drag-n-drop-issue-with-quartz-macos-backend.patch
    - 0001-Use-an-ImageSurface-rather-than-UI-back-end.patch  # [osx]

build:
  number: 1
  skip: true  # [win and py2k]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake >=3.8
    - ninja
    - pkg-config  # [not win]
   # libudev needed to link against libusb on linux
    - {{ cdt('libudev') }}  # [linux]
   # below are needed to link with Qt for qtgui
    - {{ cdt('libice') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libsm') }}  # [linux]
    - {{ cdt('libx11') }}  # [linux]
    - {{ cdt('libxau') }}  # [linux]
    - {{ cdt('libxcb') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxext') }}  # [linux]
    - {{ cdt('libxfixes') }}  # [linux]
    - {{ cdt('libxrender') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libuuid') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]

  host:
    - boost-cpp
    - click
    - click-plugins
    - codec2
    - fftw
    - gsl
    # blas needed to link with gsl
    - libblas
    - libcblas
    - libusb >=1
    - log4cpp
    - mako
    - mpir
    # we don't build against numpy C lib
    # (only needed at runtime, except gnuradio CMake checks for it at build)
    # specify version so pin is ignored
    - numpy >=1.1
    - pip  # [win]
    - python
    - six
    - swig
    - volk >=2
  # gnuradio.audio
    - alsa-lib  # [linux]
    - portaudio  # [linux]
  # gnuradio companion
    - gtk3
    - lxml
    - pygobject
    - pyyaml
  # gnuradio.qtgui
    - pyqt
    - qt
    - qwt
  # gnuradio.uhd
    - uhd
  # gnuradio.video_sdl
    - sdl  # [not osx]
  # gnuradio.zeromq
    - cppzmq
    - zeromq

  run:
  # this is the metapackage that depends on all the subpackages
    - {{ pin_subpackage('gnuradio-core', exact=True) }}
    - {{ pin_subpackage('gnuradio-grc', exact=True) }}
    - {{ pin_subpackage('gnuradio-qtgui', exact=True) }}
    - {{ pin_subpackage('gnuradio-uhd', exact=True) }}
    - {{ pin_subpackage('gnuradio-video-sdl', exact=True) }}  # [not osx]
    - {{ pin_subpackage('gnuradio-zeromq', exact=True) }}
  # explicitly add python so that build string is generated correctly
    - python

test:
  requires:
    - sqlite
  imports:
    - gnuradio.gr
    - gnuradio.qtgui
    - gnuradio.uhd
    - gnuradio.video_sdl  # [not osx]
    - gnuradio.zeromq

app:
  entry: gnuradio-companion
  icon: grc-icon.png
  summary: GNU Radio Companion

outputs:
  - name: gnuradio-core
    script: install_core.sh  # [not win]
    script: install_core.bat  # [win]
    build:
      entry_points:   # [win]
        - gr_filter_design = gnuradio.filter.filter_design:main  # [win]
        - gr_modtool = gnuradio.modtool.cli.base:cli  # [win]
      run_exports:
        - {{ pin_subpackage('gnuradio-core', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config  # [not win]
      host:
        - alsa-lib  # [linux]
        - boost-cpp
        - codec2
        - fftw
        - gsl
        - libblas
        - libcblas
        - libusb
        - log4cpp
        - mpir
        - portaudio  # [linux]
        - python
        - swig
        - volk
      run:
        - boost-cpp
        - click
        - click-plugins
        - fftw
        - {{ pin_compatible('log4cpp') }}
        - mako
        - menuinst  # [win]
        - numpy
        - {{ pin_compatible('portaudio') }}  # [linux]
        - python
        - six
    test:
      commands:
        - gnuradio-config-info -v --prefix --sysconfdir --prefsdir --userprefsdir --prefs --builddate --enabled-components --cc --cxx --cflags
        # run a few example scripts to show that at least some things work
        - python "$PREFIX/share/gnuradio/examples/volk_benchmark/volk_math.py" -L test -N 1e6 -I 3 --all  # [not win]
        - python "%PREFIX%\\Library\\share\\gnuradio\\examples\\volk_benchmark\\volk_math.py" -L test -N 1e6 -I 3 --all  # [win]
        - if not exist %PREFIX%\\Scripts\\gr_filter_design.exe exit 1  # [win]
        - if not exist %PREFIX%\\Scripts\\gr_modtool.exe exit 1  # [win]
      imports:
        - gnuradio.analog
        - gnuradio.audio
        - gnuradio.blocks
        - gnuradio.channels
        - gnuradio.digital
        - gnuradio.dtv
        - gnuradio.fec
        - gnuradio.fft
        - gnuradio.filter
        - gnuradio.gr
        - gnuradio.trellis
        - gnuradio.vocoder
        - gnuradio.wavelet
        - pmt
    about:
      summary: GNU Radio core functionality and modules
  - name: gnuradio-grc
    script: install_grc.sh  # [not win]
    script: install_grc.bat  # [win]
    build:   # [win]
      entry_points:   # [win]
        - gnuradio-companion = gnuradio.grc.main:main  # [win]
        - grcc = gnuradio.grc.compiler:main  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config  # [not win]
      host:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - gtk3
        - log4cpp
        - python
      run:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - {{ pin_compatible('log4cpp') }}
        - lxml
        - menuinst  # [win]
        - pygobject
        - python
        - pyyaml
    test:
      commands:
        - grcc "$PREFIX/share/gnuradio/examples/metadata/file_metadata_vector_sink.grc"  # [not win]
        - python "%PREFIX%\\Library\\bin\\grcc.py" "%PREFIX%\\Library\\share\\gnuradio\\examples\\metadata\\file_metadata_vector_sink.grc"  # [win]
        - python file_metadata_vector_sink.py  # [not win]
        - if not exist %PREFIX%\\Scripts\\gnuradio-companion.exe exit 1  # [win]
        - if not exist %PREFIX%\\Scripts\\grcc.exe exit 1  # [win]
    about:
      summary: GNU Radio Companion graphical flowgraph interface
  - name: gnuradio-qtgui
    script: install_qtgui.sh  # [not win]
    script: install_qtgui.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config  # [not win]
      host:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - log4cpp
        - pyqt
        - python
        - qt
        - qwt
        - volk
      run:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - {{ pin_compatible('log4cpp') }}
        - pyqt
        - python
        - {{ pin_compatible('qwt', max_pin='x.x') }}
    test:
      imports:
        - gnuradio.qtgui
    about:
      summary: GNU Radio QT module providing graphical components
  - name: gnuradio-uhd
    script: install_uhd.sh  # [not win]
    script: install_uhd.bat  # [win]
    build:   # [win]
      entry_points:   # [win]
        - uhd_siggen = gnuradio.uhd.uhd_siggen_base:main  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config  # [not win]
      host:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - log4cpp
        - python
        - uhd
      run:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - {{ pin_compatible('log4cpp') }}
        - python
    test:
      commands:
        - if not exist %PREFIX%\\Scripts\\uhd_siggen.exe exit 1  # [win]
      imports:
        - gnuradio.uhd
    about:
      summary: GNU Radio UHD module for Ettus USRP radios
  - name: gnuradio-video-sdl
    build:
      skip: true  # [osx]
    script: install_video_sdl.sh  # [not win]
    script: install_video_sdl.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config  # [not win]
      host:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - log4cpp
        - python
        - sdl
      run:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - {{ pin_compatible('log4cpp') }}
        - python
    test:
      imports:
        - gnuradio.video_sdl
    about:
      summary: GNU Radio SDL module providing video components
  - name: gnuradio-zeromq
    script: install_zeromq.sh  # [not win]
    script: install_zeromq.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config  # [not win]
      host:
        - boost-cpp
        - cppzmq
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - log4cpp
        - python
        - zeromq
      run:
        - boost-cpp
        - {{ pin_subpackage('gnuradio-core', exact=True) }}
        - {{ pin_compatible('log4cpp') }}
        - python
        - pyzmq
    test:
      imports:
        - gnuradio.zeromq
    about:
      summary: GNU Radio ZeroMQ module for message passing functionality
  # need an output with a script defined to work-around "empty" output detection
  # with python in both build (due to ninja) and host environments
  - name: gnuradio
    script: install_gnuradio.sh  # [not win]
    script: install_gnuradio.bat  # [win]

about:
  home: https://gnuradio.org/
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: COPYING
  summary: The free and open software radio ecosystem
  description: |
    GNU Radio is a free software development toolkit that provides the signal
    processing runtime and processing blocks to implement software radios using
    readily-available, low-cost external RF hardware and commodity processors.
    It is widely used in hobbyist, academic and commercial environments to
    support wireless communications research as well as to implement real-world
    radio systems.

    GNU Radio applications are primarily written using the Python programming
    language, while the supplied, performance-critical signal processing path
    is implemented in C++ using processor floating point extensions where
    available. Thus, the developer is able to implement real-time, high-
    throughput radio systems in a simple-to-use, rapid-application-development
    environment.

  doc_url: https://gnuradio.org/doc/doxygen/
  dev_url: https://github.com/gnuradio/gnuradio

extra:
  recipe-maintainers:
    - ryanvolz
